### üê≥ Step 2: Containerizing the Algonquin Pet Store Microservices
Here‚Äôs your content formatted for GitHub using proper Markdown syntax:

### üîπ Step 2.1. Dockerize the `order-service`

```bash
cd order-service-L8
```

In the `order-service-L8` directory, create a `Dockerfile` with the following content and copy the appropriate code into it.

**Build the Docker image:**

```bash
docker build -t order-service:latest .
```

**Run a Docker container from `order-service:latest` and expose it on port 3000:**

```bash
docker run --rm -d -p 3000:3000 order-service:latest
```

---

### üîπ Step 2.2. Dockerize the `product-service`

```bash
cd product-service-L8
```

In the `product-service-L8` directory, create a `Dockerfile` with the appropriate content.

**Build the Docker image:**

```bash
docker build -t product-service:latest .
```

**Run the container on port 3030:**

```bash
docker run --rm -d -p 3030:3030 product-service:latest
```

### üîπ Step 2.3. Dockerize the `store-front`

```bash
cd ..
cd store-front-L8
```

**Build the Docker image:**

```bash
docker build -t store-front:latest .
```

**Run the container on port 80:**

```bash
docker run --rm -d -p 80:80 store-front:latest
```

### Step 3: Using Docker Compose for Local Development

## Step 3.1. Create a docker-compose.yml file
In the root directory of your project (at the same level as the `order-service-L8`, `product-service`, and `store-front` directories), create a `docker-compose.yml` file:

## Step 3.2. Run the application using Docker Compose
In your terminal, run:
```bash
docker-compose up --build
```
This will build and run all the services together. You should be able to access the store-front at `http://localhost:80`.
```
```


